# /path/to/your/nginx/config/myapp.conf

# --- Upstream Servers ---
# Define your backend and frontend servers for easy reference

upstream backend_server {
    # If Express is running directly on host or published from Docker:
    server backend:3000;
    # If Express is in Docker and Nginx is ALSO in Docker on the same network:
    # server express-service-name:5000; # Replace express-service-name
}

upstream frontend_server {
    # Vite dev server
    server host.docker.internal:5173;
}


# --- HTTP Server (Redirects to HTTPS) ---
server {
    listen 80;
    server_name localhost; # Or your custom domain like myapp.local
    # enforce https
    return 301 https://$host$request_uri;
}

# --- HTTPS Server (Main Configuration) ---
server {
    listen 443 ssl http2; # Listen on 443 for HTTPS, enable HTTP/2
    server_name localhost; # Or your custom domain like myapp.local

    # --- SSL Configuration ---
    # Adjust paths based on where you generated/stored your certs
    ssl_certificate /etc/nginx/ssl/localhost.pem;       # Use the container mount path
    ssl_certificate_key /etc/nginx/ssl/localhost-key.pem; # Use the container mount path (adjust filename if needed)

    # ssl_certificate /path/to/your/certs/localhost.pem;        # openssl example
    # ssl_certificate_key /path/to/your/certs/localhost-key.pem; # openssl example

    # Standard security settings (can be tuned)
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;

    # Improve SSL performance
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off; # Consider security implications if enabling

    # --- Root and Index (Optional, often handled by proxy) ---
    # root /var/www/html; # Default Nginx root, not usually needed for proxy
    # index index.html index.htm;

    # --- Logging ---
    access_log /var/log/nginx/myapp.access.log; # Adjust path as needed
    error_log /var/log/nginx/myapp.error.log;   # Adjust path as needed

    # --- Proxying Rules ---

    # Location for API backend requests
    location /api/ {

        proxy_pass http://backend_server; # Forward to the upstream backend

        # --- Important Headers for Backend ---
        proxy_set_header Host $host; # Preserve original host requested by client
        proxy_set_header X-Real-IP $remote_addr; # Pass the real client IP
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # Append IPs if multiple proxies
        proxy_set_header X-Forwarded-Proto $scheme; # Crucial: Tells backend connection was HTTPS
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade; # Allow WebSocket upgrades if API needs them
        proxy_set_header Connection "upgrade";
        proxy_read_timeout 60s; # Adjust timeouts as needed
        proxy_connect_timeout 60s;
    }

    # Location for the React/Vite frontend (catch-all)
    location / {
        proxy_pass http://frontend_server; # Forward to the upstream frontend

        # --- Important Headers for Frontend Proxy ---
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;

        # --- WebSocket Support for Vite HMR ---
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_read_timeout 86400; # Long timeout for dev server HMR
    }

    # Optional: Add specific handling for Vite's HMR endpoint if needed,
    # but the location / block with WebSocket support usually covers it.
    # location /ws {
    #     proxy_pass http://frontend_server;
    #     proxy_http_version 1.1;
    #     proxy_set_header Upgrade $http_upgrade;
    #     proxy_set_header Connection "upgrade";
    # }
}
